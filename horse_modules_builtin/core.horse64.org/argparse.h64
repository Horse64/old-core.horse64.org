
import path from core.horse64.org
import process from core.horse64.org
import system from core.horse64.org


class ArgumentInfo {
    var name = ""
    var nargs = 0
    var aliases = []
    var optional = no
    var positional = no

    func init(name, aliases=[], nargs="default") {
        self.name = name + ""
        for alias in aliases {
            self.aliases.add(alias + "")
        }
        self.positional = (not self.name.starts("-"))
        if nargs == "default" or nargs == "?" {
            self.nargs = 1
            if not self.positional {
                self.nargs = 0
                self.optional = yes
            } elseif nargs == "?" {
                self.optional = yes
            }
        }
    }

    func names_intersect(names) {
        if names.contains(self.name) {
            return yes
        }
        for alias in self.aliases {
            if names.contains(alias) {
                return yes
            }
        }
        return no
    }
}

class Arguments {
    var _args = []
    var min_positional_args protect = 0
    var max_positional_args protect = 0
    var program_name = "unknown"

    func init(program_name=none) {
        # Sanitize and guess the program name for this arguments set:
        if program_name != none {
            # Make sure this can be used as a string:
            program_name = program_name + ""
        }
        if program_name == none {
            program_name = path.basename(system.vm_exec_path())
            if program_name == "none" {
                program_name = "unknown"
            }
        }
        self.program_name = program_name
    }

    func add_arg(name, aliases=[], nargs="default") {
        for arg in self._args {
            if arg.names_intersect([name]) or
                    arg.names_intersect(aliases) {
                raise new ValueError(
                    "name conflict with existing options"
                )
            }
        }
        self._args.add(new ArgumentInfo(
            name, aliases=aliases, nargs=nargs
        ))
        if self._args[self._args.len].positional {
            self.max_positional_args += 1
            if not self._args[self._args.len].optional {
                self.min_positional_args += 1
            }
        }
    }
}

func parse(options, arg_array=none) {
    if not has_attr(options, "max_positional_args") {
        raise new TypeError(
            "options must have the argparse.Options attributes"
        )
    }
    if arg_array == none {
        arg_array = process.args
    }
    var posargs_seen = 0
    for arg in arg_array {
        if not arg.starts("-") {
            if posargs_seen + 1 > options.max_positional_args {

            }
        }
    }
}