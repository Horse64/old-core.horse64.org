
import io from core.horse64.org
import path from core.horse64.org

func main {
    var orig_cwd = path.get_cwd()

    # Create a temp folder and go inside:
    var p = path.create_tmp_dir(prefix="io_h64_check")
    assert(path.exists(p))
    path.set_cwd(p)

    # Folder listing should be empty:
    assert(path.list("").len == 0)
    with io.open("testfile.txt", write=yes) as f {
        f.write("test data")
    }
    assert(path.list("").len == 1)
    assert(path.list("")[1] == "testfile.txt")
    var data
    with io.open("testfile.txt") as f {
        data = f.read()
    }
    assert(data == "test data")

    # Append data but now in binary mode:
    with io.open("testfile.txt", write=yes, append=yes,
                 binary=yes) as f {
        f.write(b"\xC3\xB6")  # small o with dots (umlaut 'รถ')
    }

    # Read it again, but this time partial:
    with io.open("testfile.txt") as f {  # implies binary=no!
        data = f.read(len="test data".len)
        assert(data == "test data")
        assert(f.offset() == "test data".len)
        data = f.read(len=1)
        # ^ should be TWO BYTES (for umlaut, in binary=no mode!)
        assert(data == "รถ")
        assert(f.offset() == "test dataX".len)
        assert(f.read() == "")  # since we should be at end of file
        assert(f.offset() == "test dataX".len)
    }

    # Go back to initial cwd, and remove our temp dir again
    path.set_cwd(orig_cwd)
    path.remove(p, recursive=yes)
    assert(not path.exists(p))
}

# expected result value: 0
